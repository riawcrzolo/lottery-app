
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° reset ‡πÅ‡∏•‡∏∞ renderChart()

function resetAll(){
  if(confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")){
    localStorage.removeItem("lottery_cumulative");
    location.reload();
  }
}

function displaySummary(data){
  const now = new Date();
  const timestamp = now.toLocaleString("th-TH");
  let html = `<p>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${timestamp}</p>`;
  html += "<table><tr><th>‡πÄ‡∏•‡∏Ç</th><th>‡∏ö‡∏ô</th><th>‡∏•‡πà‡∏≤‡∏á</th><th>‡πÇ‡∏ï‡πä‡∏î</th></tr>";

  const sortedKeys = Object.keys(data).sort((a, b) => {
    const isA2 = a.length === 2, isB2 = b.length === 2;
    if (isA2 && !isB2) return -1;
    if (!isA2 && isB2) return 1;
    return a.localeCompare(b);
  });

  let sum2top = 0, sum2bottom = 0, sum3top = 0, sum3tod = 0;

  for(const num of sortedKeys){
    const amt = data[num];
    html += `<tr><td>${num}</td><td>${amt.top}</td><td>${amt.bottom}</td><td>${amt.tod}</td></tr>`;
    if(num.length === 2){
      sum2top += amt.top;
      sum2bottom += amt.bottom;
    } else {
      sum3top += amt.top;
      sum3tod += amt.tod;
    }
  }

  html += "</table>";
  html += `<p>‚úÖ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏¢‡∏Å: <br>
  üîπ 2 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: ${sum2top} ‡∏ö‡∏≤‡∏ó |
  üîπ 2 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á: ${sum2bottom} ‡∏ö‡∏≤‡∏ó<br>
  üîπ 3 ‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏á: ${sum3top} ‡∏ö‡∏≤‡∏ó |
  üîπ 3 ‡∏ï‡∏±‡∏ß‡πÇ‡∏ï‡πä‡∏î: ${sum3tod} ‡∏ö‡∏≤‡∏ó</p>`;

  document.getElementById("summary").innerHTML = html;
  renderChart(data);
}

function renderChart(data){
  const container = document.getElementById("chart");
  container.innerHTML = "";

  const sorted = Object.entries(data).sort((a,b)=>a[0].localeCompare(b[0]));
  const labels = sorted.map(x => x[0]);
  const values = sorted.map(x => x[1].top + x[1].bottom + x[1].tod);

  const canvas = document.createElement("canvas");
  canvas.id = "lottoChart";
  container.appendChild(canvas);

  new Chart(canvas, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°',
        data: values,
        backgroundColor: '#26a69a'
      }]
    },
    options: {
      responsive: true,
      scales: {
        x: { ticks: { autoSkip: true, maxRotation: 90, minRotation: 45 } },
        y: { beginAtZero: true }
      }
    }
  });
}
